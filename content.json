{"pages":[],"posts":[{"title":"独与孤","text":"2020年6月12日，已经是第26个生日了。我在今天收获了三个生日祝福，两个是不同阶段的同学，一个是网友。 首先应该感谢在这个世界上，在我没有声张的情况，还有人主动给我送来祝福。自然而然，“三个祝福”固然对于一些人来说过于少而感到可笑，我也一时因此气馁。相较于过去而言，在学生时代也有班级或者好友给予无论是口头还是礼物的祝福，或者是工作时公司的生日福利，一群人凑在一起吃吃喝喝来庆祝某几个相同月份的人生日，确实仅有的几个口头祝福是寒酸了一点吧。 比起回忆，更重要的是心意。除了家人以外，有牵挂你的朋友、同学以及同事，或者相隔千里之外的网友，近年来已逐渐不敢奢求了。主要的原因当然是自己不去表达自己的期望，还有逐渐减少的社交频次，以及就是在交往过程中更加谨慎了吧。为了不触及对方的神经令其敏感，主动减少需要表达的内容，以获取交往过程中微妙的距离感，得到四平八稳的人际关系。这样的行为导致的结果也应该是咎由自取吧。 而心态的转变在于，从“仅有”三个，到“还有”三个，是不是已经开始接受了这样的现实呢。已经还有三个了，就不用提过多要求了吧。当然，同时还要感谢银行、保险和社交平台等等，从冷冰冰的机器定期服务中用热情洋溢的字眼提醒我今天生日这回事。感谢！ 说起来，自今年年初离职开始，已经在家三个月有余了。不知不觉一年已经过去二分之一，一边惊讶于白驹过隙，一边哀伤于毫无长进。三口之家的双职工家庭，离职的只可能独自一人在家，除了父母下班之后的一些交流，其余时间基本都是一个人度过。从一开始的放松，自由的心态，到现在习惯于一人食、一人眠，甚至有时开始渴望与人对话交流。人果然是社会性动物，一个人独处久了，果然还是会想念回归社会吧。但我依然以疫情为由避免了很多聚餐，以繁忙为由婉拒了一些聚会，以抱恙为由谢绝了不少机会。 原本定好的计划已经支离破碎，距离开始新生活的日子遥遥无期。 一个人的时候总是喜欢胡思乱想，便开始悲天悯人、顾影自怜起来了。 独处给了我更多的时间，而我却任其挥霍。 然而为什么不换个方向来考虑呢？ 一个房间便是一个世界。由于我在其中，因此手头的工具便赋予了意义，创造便有了容身之处，思想虽难以碰撞，却可以孜孜不倦取前人及当代精华。 可以调素琴，阅金经。无丝竹之乱耳，无案牍之劳形。 乐观地来说，独处也算是独而不孤吧。 避免了纷繁的外界，无需根据流行刻意，不要依照指示而执行。独处之时，自己便是全部，思绪漫布也无伤大雅，天马行空也安之若素。不用活在眼光之中，不须听取口舌之燥。这样也算是一种解脱。 虽然前途未卜，但是这样的日子还能持续多久呢？当一切走上正轨，也就是宣告一个时期的结束了。 这一段悠长假期，没有艳遇和激情，来弥补的是思考和自省。 漫天烦恼和忧愁的云雾，何时可以拨云见日呢？ 独处给了我更多的时间，我愿窥见星辰。","link":"/2020/06/12/%E7%8B%AC%E4%B8%8E%E5%AD%A4/"},{"title":"重返Gamemaker Studio 入门篇1","text":"空有雄心壮志，不如脚踏实地从简单做起。 经历了三年空窗期，虽说实际情况产生了不可计量的变化，也和当时想做游戏的简单初衷相去甚远。但愿望如果不开始付诸实际，只会停留在空想。因此还是准备从简单做起，不想因为复杂的实现和编程花费太多时间，而把重心侧重在玩法和构思上面，GameMaker Studio 2 貌似是一个比较折中的选择。闲话少叙，从一个简单的平台冒险类游戏下手，基本能够达到目前构思游戏demo的制作需求。本系列的目的是在跟着教程实践的基础上，对游戏制作过程的一个简单记录，仅供自己回顾，不做教程目的。 在线文档: GameMaker Studio 2 Manual官方社区: GameMaker Community知识库：GameMaker Knowledge Base 本系列参考的教程：GameMaker Studio 2: Complete Platformer Tutorial 界面介绍在打开游戏IDE之后，我们可以看到几个区域。如图所示，中间部分是工作区，所有基本的元素编辑和代码撰写都在这里。右边是素材区，已经被多个文件夹详细划分。左上是菜单栏和工具栏，最左一栏为房间设置栏，之后再详细讨论其使用方法。 工作区的操作同大多数游戏一样，通过滚轮滑动调整上下，点击中键进行移动，按住Ctrl键加上滚轮滑动可以控制工作区的界面缩放，也可以使用 Ctrl + + 和 Ctrl + - 达到相同效果。 再进行工作的时候，可以使用快捷键 F12 将工作区最大化，方便编辑。 创建贴图可以直接在工作区里点击 右键→Assets→Create Sprite；或者在素材区对应的文件夹里如前者一般创建。唯一的区别是，直接在工作区里创建的文件存储在根目录，而对应文件夹创建可以更加分门别类，当然也可以重新拖放文件达到相同效果。同理，其他需要创建的东西也可以这样操作。 以下就是一个空的贴图文件配置。 贴图可以根据我们的需要进行命名，命名一般需要规则，如玩家静止贴图用 sPlayer, 玩家跑动贴图用 sPlayerR，玩家跳跃贴图用 sPlayerA。下方的 Size 需要注意，一般是 64*64 的像素大小，也可以点击按钮进行调整。右边的 Edit Image 可以直接在编辑器里面编辑。我个人觉得还是使用更完备的外部编辑器画好再导入进来，比如 Aseprite 或 Photoshop等等。下面的 Import 按钮可以导入图片。导入图片可以是单张贴图或者多帧动画。注意这里导入的动画实际上是拼贴好的 png 文件，文件名以 _strip(num) 结尾，其中 num 是实际上帧的数量。这样导入的图片将会自动被切割成 num 数量的帧。如下图所示，一张拼贴好的4帧 sPlayer_r_strip4.png 文件： 左下角的 Collision Mask 是用于检测游戏对象碰撞的大小，可以通过手动自行设置或者自动检测来调整。 右侧是动画界面，右上角是动画帧率。注意这里的帧率仅用于显示，而不是指游戏内的实际帧率。右边的坐标指定该贴图的圆心位置，一般可以直接使用 Middle Centre 让系统自动指定。 这里我们创建了两个基本的贴图：sPlayer和 sWall，并将素材导入。 创建对象贴图只是纯粹的图片，不能执行游戏中的指令和效果，因此就需要创建对象并绑定贴图。首先，我们先创建一个玩家对象 oPlayer，并将刚才创建好的 sPlayer 进行绑定。 下方的 Events 可以用来管理对象相关的所有事件。点击并创建新的事件。首先，Create 事件对应在对象创建时，我们需要初始化一些简单的变量： 1234hsp = 0 //水平速度vsp = 0 //垂直速度grv = 0.3 //重力walksp = 4 //行走速度 紧接着，我们创建 Step事件。Step 事件管理每个时间片里面需要执行的内容，因此代码会较为复杂。首先定义以下按键： 1234//Get Player Inputkey_left = keyboard_check(vk_left) || keyboard_check(ord(&quot;A&quot;)) //方向键左或者键Akey_right = keyboard_check(vk_right)|| keyboard_check(ord(&quot;D&quot;)); //方向键右或者键Dkey_jump = keyboard_check_pressed(vk_space)|| keyboard_check_pressed(ord(&quot;W&quot;)); //空格键或键W，仅需点击即可 这样就定义好了基本的行动按键。接下来，对应的按键要加上其逻辑才能有实际意义。我们继续定义一下运动的状态： 123var move = key_right - key_left // `var` 用于声明局部变量hsp = move * walksp // 水平速度等于行动方向乘行走速度vsp = vsp + grv; // 垂直速度等于现有垂直速度加上重力速度 首先定义了一个临时变量 move。move 在这里是一个布尔值，当 key_right为 True 且 key_left 为 False 时，move值为 1 ；当 key_right为 False 且 key_left 为 True 时，move 值为 -1 。这样就可以将作为一个方向的标识。 正如我们在 Create 事件中定义的几个基础的速度变量，在 Step 事件中需要对行进速度进行实时更改。对于水平速度如此定义无可厚非，但垂直速度并没有按照物理学的实际情况算上加速度，只是简单的通过在每个时间片减去重力的速度达到下落的效果。 碰撞检测如果不做碰撞检测，那么人物在水平行进和下落的时候就不会被墙阻挡住，就没有办法进行游戏。因此要对人物和墙体之间做碰撞检测。先从跳跃开始： 1234// Jumpif (place_meeting(x, y+1, oWall)) &amp;&amp; (key_jump){ vsp = -7} place_meeting 函数用于检查某个对象实例的 Collision Mask 与另一个实例或对象的所有实例的碰撞检测。因此这个函数可以检测玩家对象和所有的墙体，而不需要对单个墙体进行设定。由于房间坐标的左上顶点是 (0, 0)，因此垂直的负方向是向上，因此向上跳跃的速度设为负值。触发跳跃的条件是当玩家位于墙对象上分且按下跳跃。 水平移动要算上玩家的移动速度。因此在 place_meeting 函数中需要注意： 12345678if (place_meeting(x+hsp, y, oWall)){ //加上玩家的速度 也就是下一个时间片原本的位移 while (!place_meeting(x+sign(hsp), y, oWall)){ //当还没碰到墙时要继续移动，这里用方向表示更简洁 x = x + sign(hsp) //继续移动到墙边 } hsp = 0 //将移动速度设为0}x = x + hsp; //更改玩家横坐标位置 同理，垂直移动也可以用类似的代码来实现： 123456789//Vertical Collisionif (place_meeting(x, y+vsp, oWall)){ while (!place_meeting(x, y+sign(vsp), oWall)){ y = y + sign(vsp); } vsp = 0;}y = y + vsp; 动画效果在移动的基础上增加动画能使得游戏演示看起来更自然生动。这里重新创建两个贴图：sPlayerR 为奔跑动画，sPlayerA 为在空中的动画。我们需要玩家在跑动的时候播放奔跑动画，在跳跃的时候播放空中的动画。现在依旧需要用碰撞来检测玩家的具体位置： 12345678910111213141516171819if (!place_meeting(x, y+1, oWall)){ //不和墙体接触，即在空中时 sprite_index = sPlayerA //将动画切换成空中动画 image_speed = 0 // 将动画循环速度常数设为0，即整个动作只播放一次 if (sign(vsp) &gt; 0){ //若玩家处于下落状态时 image_index = 1; //仅播放第二帧 } else{ image_index = 0; //播放第一帧 }}else{ //在地面的情况 image_speed = 1; //常速播放动画 if (hsp == 0){ sprite_index = sPlayer //播放静止动画 } else{ sprite_index = sPlayerR //播放运动动画 }} 跑动也有正反方向。Gamemaker Studio 提供了一个取巧的功能使得美术不需要画两个方向的动画： 123if (hsp !=0){ //在水平运动的时候 image_xscale = sign(hsp) //运动方向的正负决定动画方向}","link":"/2021/02/23/%E9%87%8D%E8%BF%94Gamemaker%20Studio1/"}],"tags":[{"name":"joural","slug":"joural","link":"/tags/joural/"},{"name":"Gamemaker Studio","slug":"Gamemaker-Studio","link":"/tags/Gamemaker-Studio/"}],"categories":[]}